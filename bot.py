import logging
import os
import asyncio
import aiohttp
import json
import nest_asyncio  
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes,CallbackContext
from dotenv import load_dotenv
from datetime import datetime
import pytz
import random




# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–µ–≤
days_of_week = {
    "Monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "—Å—Ä–µ–¥–∞",
    "Thursday": "—á–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ø—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "—Å—É–±–±–æ—Ç–∞",
    "Sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

months = {
    "January": "—è–Ω–≤–∞—Ä—è",
    "February": "—Ñ–µ–≤—Ä–∞–ª—è",
    "March": "–º–∞—Ä—Ç–∞",
    "April": "–∞–ø—Ä–µ–ª—è",
    "May": "–º–∞—è",
    "June": "–∏—é–Ω—è",
    "July": "–∏—é–ª—è",
    "August": "–∞–≤–≥—É—Å—Ç–∞",
    "September": "—Å–µ–Ω—Ç—è–±—Ä—è",
    "October": "–æ–∫—Ç—è–±—Ä—è",
    "November": "–Ω–æ—è–±—Ä—è",
    "December": "–¥–µ–∫–∞–±—Ä—è"
}




# –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–æ–≤-–¥–æ–Ω–æ—Ä–æ–≤
donor_channels: set[str] = set()

nest_asyncio.apply()

# In-memory storage for donor channels
donor_channels = set()

# Load environment variables
load_dotenv()

bot_token = os.getenv('BOT_TOKEN')
owner_id = int(os.getenv('OWNER_ID'))
forward_to_channel = os.getenv('FORWARD_TO_CHANNEL')

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FORWARD_FROM_CHANNEL
forward_from_channel_raw = os.getenv('FORWARD_FROM_CHANNEL', '')
donor_channels = set(forward_from_channel_raw.split(',')) if forward_from_channel_raw else set()
ollama_url = os.getenv('OLLAMA_URL')

def get_random_emotion():
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —ç–º–æ—Ü–∏–π –∏–∑ .env –∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
    emotions = os.getenv("EMOTIONS", "")
    emotions_list = [emotion.strip() for emotion in emotions.split(",") if emotion.strip()]
    return random.choice(emotions_list) if emotions_list else "—Ä–∞–¥–æ—Å—Ç—å"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º "—Ä–∞–¥–æ—Å—Ç—å" –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —ç–º–æ—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
emotion = get_random_emotion()

# Configure logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama
async def test_ollama_connection():
    models = await get_ollama_models()
    if models:
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama —É—Å–ø–µ—à–Ω–æ. –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω.")
        return True
    else:
        logging.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
        return False



async def get_ollama_response(message):
    url = f'{ollama_url}/api/generate'
    headers = {
    'Content-Type': 'application/json',
    }
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º emotion –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
    emotion = get_random_emotion()
        
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "!"
    if message.startswith("!"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        prompt = message[1:].strip()  # –£–±–∏—Ä–∞–µ–º "!" –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        
    else:
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        day_of_week_en = current_time.strftime("%A")
        month_name_en = current_time.strftime("%B")
        day_of_week = days_of_week.get(day_of_week_en, day_of_week_en)
        month_name = months.get(month_name_en, month_name_en)

        day_of_month = current_time.strftime("%d").lstrip("0")
        year = current_time.strftime("%Y")
        time_str = current_time.strftime("%H:%M:%S")


        prompt = (f"–°–µ–≥–æ–¥–Ω—è {day_of_week}, {day_of_month} {month_name} {year} –≥–æ–¥–∞, {time_str}. "
                  f"–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–æ–±—ã—Ç–∏–µ —Å —é–º–æ—Ä–æ–º –∏ —ç–º–æ—Ü–∏–µ–π {emotion} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º emoji: {message}")

    

    logging.info(f"Sending prompt to Ollama: {prompt}")
    
    data = {
        'model': 'hass_jann:latest',
        'prompt': prompt,
        "options": {
            "temperature": 0.8,
            "num_thread": 16
        },
        "stream": False
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    full_response = ""
                    async for line in response.content:
                        try:
                            response_part = json.loads(line)
                            full_response += response_part.get('response', '')
                        except json.JSONDecodeError as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, —Å—Ç—Ä–æ–∫–∞: {line.decode()}")
                            return f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Ollama: {e}"


                    return full_response, emotion  
                   
                else:
                    error_text = await response.text()
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}, {error_text}")
                    return f"–û—à–∏–±–∫–∞: {response.status}. –û—Ç–≤–µ—Ç –æ—Ç Ollama: {error_text}"
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Ollama: {e}"
    
    
async def send_startup_message(context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    connection_successful = await test_ollama_connection()


    if connection_successful:
        # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
       # ollama_response = await get_ollama_response("–ü–æ—à—É—Ç–∏ –ø—Ä–æ –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –¥–æ–º–∞")  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —à—É—Ç–∫—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        startup_message = f'üì¢–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.' #\n\n –®—É—Ç–∫–∞ –æ—Ç Ollama: {ollama_response}'
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        startup_message = 'üì¢–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama.'

    await context.bot.send_message(chat_id=forward_to_channel, text=startup_message)



async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"handle_all_messages called for update: {update}")
    
    if update.channel_post:
        logger.info(f"Channel post detected: {update.channel_post}")
        channel = update.channel_post.chat
        channel_identifier = str(channel.id)

        logger.info(f"Current channel identifier: {channel_identifier}")
        logger.info(f"Current donor channels: {donor_channels}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –æ—Ç Ollama
        if "üì¢" in update.channel_post.text:
            logger.info("Ignoring message from Ollama.")
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

        if channel_identifier in donor_channels:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Ollama
                original_text = update.channel_post.text
                logger.info(f"Sending to Ollama: {original_text}")
                
                ollama_response, emotion = await get_ollama_response(original_text) 

                logger.info(f"Received from Ollama: {ollama_response}")


                message_text = (
                    f"üì¢ü§ñ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–£–º–Ω–æ–≥–æ –¥–æ–º–∞ <tg-spoiler><b>(—Å —ç–º–æ—Ü–∏–µ–π {emotion})</b></tg-spoiler>:\n {ollama_response}"
                )


              # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ä–∞–∑–º–µ—Ç–∫–∏
                await context.bot.send_message(
                    chat_id=forward_to_channel,
                    text=message_text,
                    parse_mode='HTML'
)

                logger.info(f"Successfully forwarded message to {forward_to_channel}")
           
            except Exception as e:
                error_message = (
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                    f"–ö–∞–Ω–∞–ª: {channel.title}\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}"
                )
                await context.bot.send_message(
                    chat_id=forward_to_channel,
                    text=error_message
                )
                logger.error(f"Error processing message: {e}", exc_info=True)



async def log_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"Received update type: {update.update_id}")
    if update.message:
        logger.info(f"Message from {update.message.from_user.id}: {update.message.text}")
        if hasattr(update.message, 'forward_origin'):
            logger.info(f"Message is forwarded from: {update.message.forward_origin}")
        else:
            logger.info("Message is not forwarded")
    elif update.channel_post:
        logger.info(f"Channel post in {update.channel_post.chat.id}: {update.channel_post.text}")

    else:
        logger.info(f"Received update: {update}")

def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Exception while handling an update: {context.error}")





async def get_ollama_models():
    url = f'{ollama_url}/api/tags'
    headers = {'Content-Type': 'application/json'}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    models = [model["name"] for model in result.get("models", [])]
                    return models
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –æ—Ç Ollama: {response.status}, {error_text}")
                    return []
    except aiohttp.ClientError as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
        return []





async def show_models(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    models = await get_ollama_models()
    print("–§—É–Ω–∫—Ü–∏—è show_models –≤—ã–∑–≤–∞–Ω–∞")
    if not models:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
        return

    keyboard = [
        [InlineKeyboardButton(model, callback_data=f"model_{model}")]  # –ò–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å
        for model in models
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=reply_markup)



async def choose_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query.data.startswith("model_"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        return

    await query.answer()

    user_id = query.from_user.id
    chosen_model = query.data.replace("model_", "")  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä–µ user_models
    user_models[user_id] = chosen_model
    
    context.user_data["selected_model"] = chosen_model
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: {chosen_model}")

async def model_selection(update: Update, context: CallbackContext) -> None:
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /model –ø–æ–ª—É—á–µ–Ω–∞")
    models = await get_ollama_models()
    if models:
        keyboard = [[InlineKeyboardButton(model, callback_data=f"model_{model}") for model in models]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")

    
 

async def debug_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.debug("=== New Message Debug ===")
    logger.debug(f"Update object: {update.to_dict()}")
    if update.message:
        logger.debug(f"Message text: {update.message.text}")
        

        if update.message.forward_origin:
            logger.debug(f"Forward info: {update.message.forward_origin}")
    elif update.channel_post:
        logger.debug(f"Channel post: {update.channel_post.text}")
        logger.debug(f"Channel info: {update.channel_post.chat}")
    logger.debug("========================")

async def main() -> None:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if not await test_ollama_connection():
            logger.error("–ù–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Ollama.")
            return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = ApplicationBuilder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

        application.add_handler(MessageHandler(filters.ALL, debug_message), group=-2)
        application.add_handler(MessageHandler(filters.ALL, log_update), group=-1)
        application.job_queue.run_once(send_startup_message, 1)
        
        application.add_handler(CommandHandler("model", show_models))
        application.add_handler(MessageHandler(filters.ALL, handle_all_messages))
        
        application.add_error_handler(error_handler)
        
        
        application.add_handler(CallbackQueryHandler(choose_model, pattern="^model_"))
        
        logger.info("All handlers added successfully")
        logger.info("Starting polling...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.run_polling(drop_pending_updates=True)

    except Exception as e:
        logger.error(f"Error during bot execution: {e}", exc_info=True)
        raise

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot stopped due to error: {e}", exc_info=True)
        
 